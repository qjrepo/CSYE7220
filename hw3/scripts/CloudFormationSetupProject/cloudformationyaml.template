---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD pipeline that uploads a Web site to an AWS instance and makes it available to the public. **WARNING** There is currently an issue following step 08: I would have liked a step 09 to run the following command: powershell.exe -Command "ConvertTo-WebApplication -PSPath `IIS:\Sites\Default Web Site\mysong`" but this does not work and the convert-to-application needs to be done manually in IIS.'
Parameters:
  PipelineBucket:
    Type: String
    Description: The bucket where versions of the application will be placed and pipeline
      metadata
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: The base AMI to start with. This is expected to be the latest base
      Windows 2012 R2 AMI
  AppInstanceType:
    Type: String
    Description: The EC2 instance type to use when creating the application servers
    Default: t2.small
  EC2KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 key pair name to use for remoting into the application servers, **without the .pem suffix!**
  OpenRemoteDesktopPort:
    Type: String
    Description: If set to Yes the RDP port will be open. This is useful for debugging
      but for security reason should not be done for production systems.
    AllowedValues:
    - 'Yes'
    - 'No'
Conditions:
  OpenRemoteDesktopPortCondition:
    Fn::Equals:
    - 'Yes'
    - Ref: OpenRemoteDesktopPort
Resources:
  WaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Count: 1
      Handle:
        Ref: WaitHandle
      Timeout: '43200'
  AppSecurity:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The security group for the application servers
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
      - CidrIp:
          Fn::If:
          - OpenRemoteDesktopPortCondition
          - 0.0.0.0/0
          - 0.0.0.0/32
        IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
  AppServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01-download-dotnetsdk:
              command: powershell.exe -Command "((new-object net.webclient).DownloadFile('https://download.visualstudio.microsoft.com/download/pr/0d4f13a2-dd2f-4259-852e-58763d9ef303/cacb9821c492242072b0927dcb5808f5/dotnet-sdk-2.2.300-win-x64.exe', 'C:\cfn\dotnet-sdk-2.2.300-win-x64.exe'))"
              cwd: C:/cfn
              waitAfterCompletion: 0
            02-download-dotnet-cli-hosting-bundle:
              command: powershell.exe -Command "Read-S3Object -BucketName qjeremybucket -Key dotnet-hosting-2.2.5-win.exe -File dotnet-hosting-2.2.5-win.exe"
              cwd: C:/cfn
              waitAfterCompletion: 0
            03-install-dotnet-cli-hosting-bundle:
              command: C:\cfn\dotnet-hosting-2.2.5-win.exe /install /quiet /log C:\cfn\dotnet-hosting-2.2.5-win.txt
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            04-import-service-module:
              command: powershell.exe -Command Import-Module -Name ServerManager
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            05-install-web-server:
              command: powershell.exe -Command Install-WindowsFeature -name Web-Server -IncludeManagementTools
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            06-create-folder:
              command: powershell.exe -Command "New-Item -Path 'c:\' -Name 'NetCoreApp' -ItemType 'directory'"
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            07-create-folder:
              command: powershell.exe -Command "New-Item -Path 'c:\NetCoreApp' -Name 'publish' -ItemType 'directory'"
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            08-install-virtual-directory:
              command: powershell.exe -Command "New-WebVirtualDirectory -Site 'Default Web Site' -Name 'mysong' -PhysicalPath 'c:/NetCoreApp/publish'"
              ignoreErrors: 'true'
              waitAfterCompletion: 0                        
            09-download-host-agent:
              command:
                Fn::Join:
                - ''
                - - powershell.exe -Command "Read-S3Object -BucketName 'aws-codedeploy-us-east-1' -Key 'latest/codedeploy-agent.msi' -File 'codedeploy-agent.msi'"
              cwd: C:/cfn
              waitAfterCompletion: 0
            10-install-host-agent:
              command: C:\cfn\codedeploy-agent.msi /quiet /l C:\cfn\host-agent-install-log.txt
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            11-signal-ready:
              command:
                Fn::Join:
                - ''
                - - '"C:\Program Files\Amazon\cfn-bootstrap\cfn-signal"'
                  - ' -e 0 "'
                  - Ref: WaitHandle
                  - "\""
              waitAfterCompletion: 0
          services:
            windows:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
                commands:
                - 01-install-host-agent
    Properties:
      IamInstanceProfile:
        Ref: InstanceRoleInstanceProfile
      ImageId:
        Ref: ImageId
      InstanceType:
        Ref: AppInstanceType
      KeyName:
        Ref: EC2KeyName
      SecurityGroups:
      - Ref: AppSecurity
      Tags:
      - Key: Name
        Value: YourTestNetCoreApp-Instance
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "<script>\n"
            - 'mkdir c:\cfn

'
            - 'mkdir c:\cfn\log

'
            - 'c:\"Program Files"\Amazon\cfn-bootstrap\cfn-init.exe -s '
            - Ref: AWS::StackName
            - " --region "
            - Ref: AWS::Region
            - " -r AppServerInstance > c:\\cfn\\log\\cfn-call-log 2>&1"
            - "</script>"
  CodeDeployTrustRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Sid: '1'
          Effect: Allow
          Principal:
            Service:
            - codedeploy.us-east-1.amazonaws.com
            - codedeploy.us-west-2.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
  CodeDeployRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - ec2:Describe*
        - Effect: Allow
          Resource:
          - "*"
          Action:
          - autoscaling:CompleteLifecycleAction
          - autoscaling:DeleteLifecycleHook
          - autoscaling:DescribeLifecycleHooks
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:PutLifecycleHook
          - autoscaling:RecordLifecycleActionHeartbeat
      Roles:
      - Ref: CodeDeployTrustRole
  CodeDeployAppInstance:
    Type: AWS::CodeDeploy::Application
    DependsOn: WaitCondition
    Properties:
      ApplicationName: YourTestNetCoreApp-Instance
  CodeDeployAppInstanceDeployment:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn: AppServerInstance
    Properties:
      ApplicationName:
        Ref: CodeDeployAppInstance
      DeploymentGroupName: YourTestNetCoreApp-Deployment
      Ec2TagFilters:
      - Key: Name
        Type: KEY_AND_VALUE
        Value: YourTestNetCoreApp-Instance
      ServiceRoleArn:
        Fn::GetAtt:
        - CodeDeployTrustRole
        - Arn
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
  PipelinePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Resource: "*"
          Effect: Allow
        - Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::codepipeline*
          - arn:aws:s3:::elasticbeanstalk*
          Effect: Allow
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Resource: "*"
          Effect: Allow
        - Action:
          - elasticbeanstalk:*
          - ec2:*
          - elasticloadbalancing:*
          - autoscaling:*
          - cloudwatch:*
          - s3:*
          - sns:*
          - cloudformation:*
          - rds:*
          - sqs:*
          - ecs:*
          - iam:PassRole
          Resource: "*"
          Effect: Allow
        - Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Resource: "*"
          Effect: Allow
      PolicyName: PipelinePolicy
      Roles:
      - Ref: PipelineRole
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: TheronsTestNetCoreApp
      ArtifactStore:
        Location:
          Ref: PipelineBucket
        Type: S3
      RoleArn:
        Fn::GetAtt:
        - PipelineRole
        - Arn
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: AWS
            Version: '1'
            Provider: S3
          OutputArtifacts:
          - Name: SourceOutput
          Configuration:
            S3Bucket:
              Ref: PipelineBucket
            S3ObjectKey: example_app.zip
          RunOrder: 1
      - Name: Instance
        Actions:
        - Name: Instance
          InputArtifacts:
          - Name: SourceOutput
          ActionTypeId:
            Category: Deploy
            Owner: AWS
            Version: '1'
            Provider: CodeDeploy
          Configuration:
            ApplicationName:
              Ref: CodeDeployAppInstance
            DeploymentGroupName:
              Ref: CodeDeployAppInstanceDeployment
          RunOrder: 1
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  InstanceRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - autoscaling:Describe*
          - cloudformation:Describe*
          - cloudformation:GetTemplate
          - s3:Get*
          Resource: "*"
      Roles:
      - Ref: InstanceRole
  InstanceRoleInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: InstanceRole
Outputs:
  InstanceDNS:
    Value:
      Fn::GetAtt:
      - AppServerInstance
      - PublicDnsName
    Description: The DNS for the Instance stage that will have the ASP.NET Core application
      deployed to.
  CodeDeployTrustRoleARN:
    Value:
      Fn::GetAtt:
      - CodeDeployTrustRole
      - Arn
      
